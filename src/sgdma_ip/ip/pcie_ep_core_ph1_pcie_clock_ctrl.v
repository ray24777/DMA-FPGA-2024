
/************************************************************\
 **  Copyright (c) 2012-2024 Anlogic Inc.
 **  All Right Reserved.\
\************************************************************/
/************************************************************\
 ** Log	:	This file is generated by Anlogic IP Generator.
 ** File	:	D:/my_project/O__Verimake__DEMO__PH1A90/sgdma/src/sgdma_ip/ip/pcie_ep_core_ph1_pcie_clock_ctrl.v
 ** Date	:	2024 09 12
 ** TD version	:	6.0.122666
\************************************************************/
module pcie_ep_core_ph1_clock_ctrl #(parameter AUX_FREQ = 50000000, 
        parameter SIM_MODE = 0) (
    input wire core_clk, 
    input wire aux_clk, 
    input wire core_rst_n, 
    input wire rdlh_link_up, 
    output reg gen1_ready, 
    input wire dbi_done, 
    output wire user_clk, 
    output reg user_link) ;
    // ====================================================================
    // Parameter|Wire|Reg
    // ====================================================================
    localparam IDLE = 8'b0000_0001, 
        INIT_GEN1 = 8'b0000_0010, 
        WAIT_DBI = 8'b0000_0100, 
        WAIT_LINK = 8'b0000_1000, 
        GEN2 = 8'b0001_0000, 
        GEN3 = 8'b0010_0000, 
        JUDGE = 8'b0100_0000, 
        DONE = 8'b1000_0000 ; 
    localparam PLL_IDLE_CNT = ((SIM_MODE == 0) ? (1000000 / (1000000000 / AUX_FREQ)) : (10000 / (1000000000 / AUX_FREQ))) ; 
    localparam LINK_WAIT_CNT = ((SIM_MODE == 0) ? (1000000 / (1000000000 / AUX_FREQ)) : (10000 / (1000000000 / AUX_FREQ))) ; 
    localparam PLL_LOCK_CNT = ((SIM_MODE == 0) ? (250000 / (1000000000 / AUX_FREQ)) : (10000 / (1000000000 / AUX_FREQ))) ; 
    localparam AUX_10US_CNT = (10000 / (1000000000 / AUX_FREQ)) ; 
    localparam PLL_IDLE_WIDTH = $clog2(PLL_IDLE_CNT), 
        LINK_WAIT_WIDTH = $clog2(LINK_WAIT_CNT), 
        PLL_LOCK_WIDTH = $clog2(PLL_LOCK_CNT), 
        AUX_10US_WIDTH = $clog2(AUX_10US_CNT) ; 
    localparam PLL_CFG_NUM = 6 ; 
    wire core_clk_bufg ; 
    wire core_clk_sclk ; 
    reg [7:0] ph1_pcie_cfg_st ; 
    reg dbi_done_aux ; 
    reg dbi_done_aux_dly ; 
    reg rdlh_link_up_aux ; 
    reg rdlh_link_up_aux_dly ; 
    reg user_link_aux ; 
    reg user_link_aux_dly ; 
    reg gen1_ready_aux ; 
    reg gen1_ready_aux_dly ; 
    wire pll_lock ; 
    reg pll_lock_aux ; 
    reg pll_lock_aux_dly ; 
    reg pll_rst_n ; 
    reg pll_ready ; 
    reg [PLL_IDLE_WIDTH:0] pll_idle_cnt ; 
    reg [LINK_WAIT_WIDTH:0] link_wait_cnt ; 
    reg [PLL_LOCK_WIDTH:0] pll_lock_cnt ; 
    reg [AUX_10US_WIDTH:0] aux_10us_cnt ; 
    reg [11:0] core_10us_cnt ; 
    reg [11:0] core_10us_cnt_aux ; 
    reg [11:0] core_10us_cnt_aux_ff ; 
    reg [11:0] core_10us_cnt_aux_dly ; 
    reg aux_10us_cnt_f ; 
    reg aux_10us_cnt_f_core ; 
    reg [3:0] aux_10us_cnt_f_dly ; 
    reg lock_gen1 ; 
    reg lock_gen2 ; 
    reg lock_gen3 ; 
    reg [16:0] gen1_cfg_data [(PLL_CFG_NUM - 1):0] ; 
    reg [16:0] gen2_cfg_data [(PLL_CFG_NUM - 1):0] ; 
    reg [16:0] gen3_cfg_data [(PLL_CFG_NUM - 1):0] ; 
    // pll drp configuration user interface
    reg pll_drp_sel ; 
    wire pll_drp_rd = 1'b0 ; 
    reg pll_drp_wr ; 
    reg [7:0] pll_drp_addr ; 
    reg [7:0] pll_drp_wdata ; 
    wire pll_drp_err ; 
    wire pll_drp_rdy ; 
    wire [7:0] pll_drp_rdata ; 
    reg [3:0] pll_drp_cnt ; 
    // ====================================================================
    // Main Code
    // ====================================================================
    // core_clk route
    PH1_LOGIC_BUFG u_pcie_ep_core_ph1_pcie_bufg (.i(core_clk), 
                .o(core_clk_bufg)) ; 
    PH1_PHY_SCLK_V2 u_pcie_ep_core_ph1_pcie_sclk (.ce(1'b1), 
                .clkin(core_clk), 
                .clkout(core_clk_sclk)) ; 
    // input pipeline
    always
        @(posedge aux_clk)
        begin
            dbi_done_aux <=  dbi_done ;
            dbi_done_aux_dly <=  dbi_done_aux ;
            rdlh_link_up_aux <=  rdlh_link_up ;
            rdlh_link_up_aux_dly <=  rdlh_link_up_aux ;
            pll_lock_aux <=  pll_lock ;
            pll_lock_aux_dly <=  pll_lock_aux ;
        end
    // output pipeline
    always
        @(posedge user_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    user_link_aux_dly <=  1'b0 ;
                    user_link <=  1'b0 ;
                    gen1_ready_aux_dly <=  1'b0 ;
                    gen1_ready <=  1'b0 ;
                end
            else
                begin
                    user_link_aux_dly <=  user_link_aux ;
                    user_link <=  user_link_aux_dly ;
                    gen1_ready_aux_dly <=  gen1_ready_aux ;
                    gen1_ready <=  gen1_ready_aux_dly ;
                end
        end
    //--------------------------------------------
    //  pcie cfg main state
    //--------------------------------------------
    always
        @(posedge aux_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    ph1_pcie_cfg_st <=  IDLE ;
                    user_link_aux <=  1'b0 ;
                    gen1_ready_aux <=  1'b0 ;
                    pll_idle_cnt <=  {PLL_IDLE_WIDTH{1'b0}} ;
                    link_wait_cnt <=  {LINK_WAIT_WIDTH{1'b0}} ;
                end
            else
                begin
                    case (ph1_pcie_cfg_st)
                    IDLE : 
                        begin
                            user_link_aux <=  1'b0 ;
                            gen1_ready_aux <=  1'b0 ;
                            pll_idle_cnt <=  (pll_idle_cnt + 1'b1) ;
                            ph1_pcie_cfg_st <=  ((pll_idle_cnt == PLL_IDLE_CNT) ? INIT_GEN1 : IDLE) ;
                        end
                    INIT_GEN1 : 
                        begin
                            ph1_pcie_cfg_st <=  (pll_ready ? WAIT_DBI : INIT_GEN1) ;
                        end
                    WAIT_DBI : 
                        begin
                            gen1_ready_aux <=  1'b1 ;
                            ph1_pcie_cfg_st <=  ((dbi_done_aux_dly & rdlh_link_up_aux_dly) ? WAIT_LINK : WAIT_DBI) ;
                        end
                    WAIT_LINK : 
                        begin
                            link_wait_cnt <=  (link_wait_cnt + 1'b1) ;
                            ph1_pcie_cfg_st <=  ((link_wait_cnt == LINK_WAIT_CNT) ? JUDGE : WAIT_LINK) ;
                        end
                    JUDGE : 
                        begin
                            ph1_pcie_cfg_st <=  (lock_gen1 ? DONE : (lock_gen2 ? GEN2 : (lock_gen3 ? GEN3 : JUDGE))) ;
                        end
                    GEN3 : 
                        begin
                            ph1_pcie_cfg_st <=  (pll_ready ? DONE : GEN3) ;
                        end
                    GEN2 : 
                        begin
                            ph1_pcie_cfg_st <=  (pll_ready ? DONE : GEN2) ;
                        end
                    DONE : 
                        begin
                            ph1_pcie_cfg_st <=  (pll_ready ? DONE : JUDGE) ;
                            user_link_aux <=  1'b1 ;
                        end
                    default : 
                        ; 
                    endcase 
                end
        end
    always
        @(posedge aux_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    aux_10us_cnt <=  {AUX_10US_WIDTH{1'b0}} ;
                end
            else
                if ((ph1_pcie_cfg_st == JUDGE)) 
                    begin
                        if (((aux_10us_cnt != AUX_10US_CNT) && (core_10us_cnt_aux_ff != 0))) 
                            // both clock need to be present 
                            aux_10us_cnt <=  (aux_10us_cnt + 1'b1) ;
                    end
                else
                    begin
                        aux_10us_cnt <=  {AUX_10US_WIDTH{1'b0}} ;
                    end
        end
    always
        @(posedge aux_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    aux_10us_cnt_f <=  1'b0 ;
                end
            else
                if (((ph1_pcie_cfg_st == JUDGE) && (aux_10us_cnt == AUX_10US_CNT))) 
                    begin
                        aux_10us_cnt_f <=  1'b1 ;
                    end
                else
                    begin
                        aux_10us_cnt_f <=  1'b0 ;
                    end
        end
    always
        @(posedge core_clk_bufg or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    aux_10us_cnt_f_core <=  1'b0 ;
                end
            else
                begin
                    aux_10us_cnt_f_core <=  aux_10us_cnt_f ;
                end
        end
    always
        @(posedge core_clk_bufg or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    core_10us_cnt <=  12'd0 ;
                end
            else
                if ((ph1_pcie_cfg_st == JUDGE)) 
                    begin
                        if ((aux_10us_cnt_f_core == 1'b0)) 
                            core_10us_cnt <=  (core_10us_cnt + 1'b1) ;
                    end
                else
                    begin
                        core_10us_cnt <=  12'd0 ;
                    end
        end
    always
        @(posedge aux_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    aux_10us_cnt_f_dly <=  4'b0 ;
                end
            else
                if (aux_10us_cnt_f) 
                    begin
                        aux_10us_cnt_f_dly <=  {aux_10us_cnt_f_dly[2:0],
                                1'b1} ;
                    end
                else
                    begin
                        aux_10us_cnt_f_dly <=  4'b0 ;
                    end
        end
    always
        @(posedge aux_clk)
        begin
            core_10us_cnt_aux <=  core_10us_cnt ;
            core_10us_cnt_aux_ff <=  core_10us_cnt_aux ;
            core_10us_cnt_aux_dly <=  core_10us_cnt_aux_ff ;
        end
    always
        @(posedge aux_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    lock_gen1 <=  1'b0 ;
                end
            else
                if (((ph1_pcie_cfg_st == JUDGE) && (aux_10us_cnt_f_dly[3] == 1'b1))) 
                    begin
                        if (((core_10us_cnt_aux_dly >= 550) && (core_10us_cnt_aux_dly <= 700))) 
                            begin
                                lock_gen1 <=  1'b1 ;
                            end
                    end
                else
                    begin
                        lock_gen1 <=  1'b0 ;
                    end
        end
    always
        @(posedge aux_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    lock_gen2 <=  1'b0 ;
                end
            else
                if (((ph1_pcie_cfg_st == JUDGE) && (aux_10us_cnt_f_dly[3] == 1'b1))) 
                    begin
                        if (((core_10us_cnt_aux_dly >= 1100) && (core_10us_cnt_aux_dly <= 1300))) 
                            begin
                                lock_gen2 <=  1'b1 ;
                            end
                    end
                else
                    begin
                        lock_gen2 <=  1'b0 ;
                    end
        end
    always
        @(posedge aux_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    lock_gen3 <=  1'b0 ;
                end
            else
                if (((ph1_pcie_cfg_st == JUDGE) && (aux_10us_cnt_f_dly[3] == 1'b1))) 
                    begin
                        if (((core_10us_cnt_aux_dly >= 2400) && (core_10us_cnt_aux_dly <= 2600))) 
                            begin
                                lock_gen3 <=  1'b1 ;
                            end
                    end
                else
                    begin
                        lock_gen3 <=  1'b0 ;
                    end
        end
    //--------------------------------------------
    //  pll drp configurtaion interface
    //--------------------------------------------
    always
        @(posedge aux_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    pll_drp_sel <=  1'b0 ;
                    pll_drp_wr <=  1'b0 ;
                    pll_drp_addr <=  8'd0 ;
                    pll_drp_wdata <=  8'd0 ;
                    pll_drp_cnt <=  4'd0 ;
                end
            else
                begin
                    case (ph1_pcie_cfg_st)
                    INIT_GEN1 : 
                        begin
                            pll_drp_addr <=  gen1_cfg_data[pll_drp_cnt][7:0] ;
                            pll_drp_wdata <=  gen1_cfg_data[pll_drp_cnt][15:8] ;
                            pll_drp_sel <=  ((pll_drp_cnt < PLL_CFG_NUM) ? 1'b1 : 1'b0) ;
                            pll_drp_wr <=  ((pll_drp_cnt < PLL_CFG_NUM) ? 1'b1 : 1'b0) ;
                            pll_drp_cnt <=  ((pll_drp_cnt != (PLL_CFG_NUM + 4)) ? (pll_drp_cnt + 1'b1) : pll_drp_cnt) ;
                        end
                    GEN2 : 
                        begin
                            pll_drp_addr <=  gen2_cfg_data[pll_drp_cnt][7:0] ;
                            pll_drp_wdata <=  gen2_cfg_data[pll_drp_cnt][15:8] ;
                            pll_drp_sel <=  ((pll_drp_cnt < PLL_CFG_NUM) ? 1'b1 : 1'b0) ;
                            pll_drp_wr <=  ((pll_drp_cnt < PLL_CFG_NUM) ? 1'b1 : 1'b0) ;
                            pll_drp_cnt <=  ((pll_drp_cnt != (PLL_CFG_NUM + 4)) ? (pll_drp_cnt + 1'b1) : pll_drp_cnt) ;
                        end
                    GEN3 : 
                        begin
                            pll_drp_addr <=  gen3_cfg_data[pll_drp_cnt][7:0] ;
                            pll_drp_wdata <=  gen3_cfg_data[pll_drp_cnt][15:8] ;
                            pll_drp_sel <=  ((pll_drp_cnt < PLL_CFG_NUM) ? 1'b1 : 1'b0) ;
                            pll_drp_wr <=  ((pll_drp_cnt < PLL_CFG_NUM) ? 1'b1 : 1'b0) ;
                            pll_drp_cnt <=  ((pll_drp_cnt != (PLL_CFG_NUM + 4)) ? (pll_drp_cnt + 1'b1) : pll_drp_cnt) ;
                        end
                    default : 
                        pll_drp_cnt <=  4'd0 ;
                    endcase 
                end
        end
    // pll_rst_n, befor drp pll, reset pll
    always
        @(posedge aux_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    pll_rst_n <=  1'b0 ;
                end
            else
                if ((pll_drp_cnt == (PLL_CFG_NUM + 2))) 
                    begin
                        pll_rst_n <=  1'b0 ;
                    end
                else
                    begin
                        pll_rst_n <=  1'b1 ;
                    end
        end
    // pll_lock_cnt
    always
        @(posedge aux_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    pll_lock_cnt <=  {PLL_LOCK_WIDTH{1'b0}} ;
                end
            else
                if (((((pll_lock_aux_dly == 1'b0) || (ph1_pcie_cfg_st == IDLE)) || (lock_gen2 == 1'b1)) || (lock_gen3 == 1'b1))) 
                    begin
                        pll_lock_cnt <=  {PLL_LOCK_WIDTH{1'b0}} ;
                    end
                else
                    if ((pll_lock_cnt != PLL_LOCK_CNT)) 
                        begin
                            pll_lock_cnt <=  (pll_lock_cnt + 1'b1) ;
                        end
        end
    // pll_ready
    always
        @(posedge aux_clk or 
            negedge core_rst_n)
        begin
            if ((!core_rst_n)) 
                begin
                    pll_ready <=  1'b0 ;
                end
            else
                if (((lock_gen2 == 1'b1) || (lock_gen3 == 1'b1))) 
                    begin
                        pll_ready <=  1'b0 ;
                    end
                else
                    if ((pll_lock_cnt == PLL_LOCK_CNT)) 
                        begin
                            pll_ready <=  1'b1 ;
                        end
                    else
                        begin
                            pll_ready <=  1'b0 ;
                        end
        end
    pcie_ep_core_ph1_core_pll u_pcie_ep_core_ph1_core_pll (.refclk(core_clk_sclk), 
                .reset((!pll_rst_n)), 
                .drp_clk(aux_clk), 
                .drp_rstn(1'b1), 
                .drp_sel(pll_drp_sel), 
                .drp_rd(pll_drp_rd), 
                .drp_wr(pll_drp_wr), 
                .drp_addr(pll_drp_addr), 
                .drp_wdata(pll_drp_wdata), 
                .lock(pll_lock), 
                .drp_err(pll_drp_err), 
                .drp_rdy(pll_drp_rdy), 
                .drp_rdata(pll_drp_rdata), 
                .clk0_out(user_clk)) ; 
    // pll cfg data
    always
        @(posedge aux_clk)
        begin
            gen1_cfg_data[0] <=  16'h0c_24 ;// 0.5 : 8  / 0.25 : c
            gen1_cfg_data[1] <=  16'h0e_25 ;
            gen1_cfg_data[2] <=  16'h0f_27 ;
            gen1_cfg_data[3] <=  16'h0c_28 ;
            gen1_cfg_data[4] <=  16'h0e_29 ;
            gen1_cfg_data[5] <=  16'h0f_2b ;
            gen2_cfg_data[0] <=  16'h06_24 ;// 0.5 : 4 / 0.25 : 6
            gen2_cfg_data[1] <=  16'h06_25 ;
            gen2_cfg_data[2] <=  16'h07_27 ;
            gen2_cfg_data[3] <=  16'h06_28 ;
            gen2_cfg_data[4] <=  16'h06_29 ;
            gen2_cfg_data[5] <=  16'h07_2b ;
            gen3_cfg_data[0] <=  16'h03_24 ;// 0.5 : 2 / 0.25 : 3
            gen3_cfg_data[1] <=  16'h02_25 ;
            gen3_cfg_data[2] <=  16'h03_27 ;
            gen3_cfg_data[3] <=  16'h03_28 ;
            gen3_cfg_data[4] <=  16'h02_29 ;
            gen3_cfg_data[5] <=  16'h03_2b ;
        end
endmodule


